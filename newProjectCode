#include <math.h>

#define sensorInput A1
#define motorDirPin 4
#define motorPWMPin 5
#define ticksPerDeg 14.26

/* ------------------------------------------------
 *  Exaggerated Vibration and Recoil from Impact
 *  
 *  From Gleeson and Johnson's 2010 paper on cartoon haptics
 *  
 *  PLEASE OPEN THE SERIAL MONITOR
 *  
 *  Press S1 for a vibration and recoil force amplitude that
 *  is proportional to the incoming velocity. This means
 *  a fast incoming velocity will give a large force amplitude
 *  for oscillation and recoil
 *  
 *  Press S2 for a vibration and recoil force amplitude that
 *  is inversely proportional to the incoming velocity. This 
 *  means a slow incoming velocity will give a large force 
 *  amplitude for oscillation and recoil
 *  
 *  Press S3 for an ordinary virtual wall with no exaggerated
 *  recoil or vibration
 *  
 *  If you intend to feel the effect of a slow velocity when 
 *  approaching the virtual wall in the proportional or
 *  inversely proportional cases (S1 and S2), you must move
 *  VERY slowly up to the wall at -15 degrees, otherwise the 
 *  effect is not as noticeable due to the small dynamic range 
 *  of the motor on our haptic paddles. 
 *    
 *  Travis Allen, ME EN 7240 S'21
 */


// Button Variables -------------------------------
const int er0 = 0;                // value assigned to no button being pressed
const int inv = 2;                // value assigned to S1 button being pressed
const int prop = 1;               // value assigned to S2 button being pressed
const int vw = 3;                 // value assigned to S3 button being pressed
const int er1 = 4;                // value assigned to S4 button being pressed
const int er2 = 5;                // value assigned to S5 button being pressed
int counts = 0;                   // variable used to determine which regime to enter
int key_Pressed = er0;            // variable used to determine which key was pressed

// Virtual Wall Variables -------------------------------
float angleVal = 0.0;             // position of haptic paddle at this iteration
float prevAngleVal = 0.0;         // position of haptic paddle at previous iteration
float velocity = 0.0;             // velocity of haptic paddle at this iteration
float prevVelocity = 0.0;         // velocity at previous iteration
double duty = 0;                  // duty cycle (between 0 and 255)
unsigned int motorCommand = 0;    // motor power 
float kWall = .5;                 // spring constant for simple virtual wall
float totalTorque = 0.0;          // combined torque to be administered by the motor
float posError = 0;               // distance between wall and current location of paddle
float samplingTime = 0.0;         // exactly what it says
unsigned long currentTime =  0;   // time at current iteration
unsigned long prevTime =  0;      // time at previous iteration
float tau = .0005;                // constant for first order low pass filter
float timeAdjust = 64.0;          // divide by this to get milliseconds after PWM change

// Oscillation and Recoil Variables -------------------------------------
// variables
float incv = 0.0;                 // incoming velocity when an event occurs
float fc = 0.78;                  // FIR filter constant
float wallLoc = -15.0;            // position of wall in deg
float wallResponse = 0.0;         // force commanded by interaction with wall
bool event = 0;                   // flag to signal if the event has occured
float oscillation = 0.0;          // force commanded by exaggerated oscillation
float recoil = 0.0;               // force commanded by exaggerated recoil
float frequency = 4.0;            // frequency of exaggerated oscillation in hz
float omega = 0.0;                // frequency of exaggerated oscillation in rad/s, to be converted
float erd = -15;                  // event reset distance, when you move away by this much the event is cancelled
unsigned long startTime = 0.0;    // time that event begins, used for calculation of time t
float t = 0.0;                    // time t since event began, in seconds
float cutoff = 0.0;               // time cutoff for event to end


void setup() {
  // initialize pins
  pinMode(sensorInput, INPUT);
  pinMode(motorPWMPin, OUTPUT);
  pinMode(motorDirPin, OUTPUT);
  pinMode(13, OUTPUT);  

  // begin serial communication
  Serial.begin(9600);

  // wait until serial connection is established, comment out if not using USB connection
  while (!Serial);    
                      
  // Set PWM Frequency
  setPwmFrequency(motorPWMPin,1);

  // Read values to initialize "previous" variables
  prevAngleVal = analogRead(sensorInput);
  prevTime = millis();
  
  // Print instructions one time
  Serial.println("Exaggerated Vibration and Recoil from Impact");
  Serial.println("From Gleeson and Johnson's 2010 paper on cartoon haptics");
  Serial.println();
  Serial.println("Press S1 for proportional magnitudes");
  Serial.println("Press S2 for inverse magnitudes");
  Serial.println("Press S3 for virtual wall");
  Serial.println();
  Serial.println("Press buttons to switch between modes");

  // convert oscillation frequency from hz to rad/s
  omega = 2*PI*frequency;
 
}

void loop()
{
  // read the buttons
  key_Pressed = Read_Buttons();  

  // Do something based on the button pressed
  switch (key_Pressed)           
  { 
    case prop:
      {
        analogWrite(motorPWMPin,0);
        counts = 1;
        Serial.println("proportional magnitudes"); // Print the key that was pressed
        delay(8000);                               // Delay for switch debounce
        break;
      }
    case inv:
      {
        analogWrite(motorPWMPin,0);
        counts = 2;
        Serial.println("inverse magnitudes");
        delay(7000);                                // Delay for switch debounce
        break;
      }
    case vw:
      {
        analogWrite(motorPWMPin,0);
        counts = 3;
        Serial.println("virtual wall");
        delay(8000);                                // Delay for switch debounce
        break;
      }
    case er1:
      {
        analogWrite(motorPWMPin,0);
        Serial.println("press a different button");
        delay(8000);                                // Delay for switch debounce
        break;
      }
    case er2:
      {
        analogWrite(motorPWMPin,0);
        Serial.println("press a different button");
        delay(8000);                                // Delay for switch debounce
      }
    case er0:
      {
        break;
      }
  }
  if(key_Pressed != er0)   // Blink LED and debounce switch
  {
  digitalWrite(13, HIGH);  // Turn LED on
  delay(700);              // Delay for switch debounce & LED blink
  digitalWrite(13, LOW);   // Turn LED off
  }

  
  //---------------------------------------------------------------------------------------------------------------------------------------------
  // Proportional rel'n between incoming velocity and ringing amplitude
  //---------------------------------------------------------------------------------------------------------------------------------------------
  if(counts == 1){

    // read the current position
    angleVal = (512.0 - analogRead(sensorInput))/ticksPerDeg;

    // determine the current time and the time that has passed since the last update, in milliseconds
    currentTime = millis()/timeAdjust;                             
    samplingTime = currentTime - prevTime;                      
  
    // compute raw angular velocity in deg/s if the sampling time is not zero. This solves a lot of problems. Thanks Andres!
    if (samplingTime != 0.0){                                   
      velocity = (angleVal - prevAngleVal)/samplingTime*1000.0; 
    }

    // filter velocity with an FIR filter
    velocity = fc*velocity+(1.0-fc)*prevVelocity;     

    // determine how far we are from the wall
    posError = wallLoc - angleVal;                            
       
    // check to see if we are in the wall and if we are not already in an event 
    // If both of these are true, begin an "event" that will recoil and oscillate
    if (posError > 0.0) {
      if (event == 0) {
        // record the time that the event was triggered. This will be t = 0
        startTime = currentTime;
        
        // make note of the fact that an event has begun
        event = 1;

        // record the velocity that we entered the wall with so we can appropriately scale the response
        incv = velocity;
      } // if event == 0
      
      // we're still in the wall, but event may == 1, so calculate the response an ordinary virtual wall should produce
      wallResponse = posError*kWall;
      } // if posError > 0.0

      // if we aren't in the wall, set the wall response to zero
      else {                                        
      wallResponse = 0.0;                             
    }
    
    // If we are in an event, determine the recoil and oscillation forces to be displayed
    if(event == 1){
      // only display reaction for large enough initial velocities. This way we can still approach the wall slowly
      if(incv < -15.0){
        // record the time that has passed since the event began, with a new time variable that started at 0. units are seconds
        t = (currentTime - startTime)/1000.0;

        // calculate the force of the oscillation
        oscillation = 0.08*abs(incv)*exp(-.5*t)*sin(omega*t);
        
        // calculate the force of the recoil
        recoil = 10.0;
      }
    }

    // combine the wall response with the oscillation and recoil
    totalTorque = wallResponse + oscillation + recoil;

    // calculate cutoff time
    //cutoff = t + 10000;
    //   || (currentTime > cutoff)

    // check to see if we are still within the region where events are allowed, [-15,0]
    if ((posError < erd)) {
      // if we have left the region, end the event
      event = 0; 

      // since the event has ended, oscillation and recoil are zero
      oscillation = 0;
      recoil = 0;
    }
    
    // Compute the duty cycle required to generate torque at the motor
    duty = abs(totalTorque);
  
    // Make sure the duty cycle is between 0 and 100%
    if (duty > 1) {
      duty = 1;
    } else if (duty < 0) {
      duty = 0;
    }
  
    // Determine correct direction for motor torque
    if (totalTorque > 0.0) {
      digitalWrite(motorDirPin, HIGH);
      motorCommand = (int)(duty * 255);         // convert duty cycle to output signal
    } else {
      digitalWrite(motorDirPin, LOW);
      motorCommand = (int)(duty * 255);         // convert duty cycle to output signal
    }

    // output the completed signal to the motor
    analogWrite(motorPWMPin, motorCommand);
  
    // update old values with the current state for the next loop
    prevAngleVal = angleVal;
    prevVelocity = velocity;
    prevTime = currentTime;
         
       
  } // if counts == 1
  
  //---------------------------------------------------------------------------------------------------------------------------------------------
  // Inverse rel'n between incoming velocity and ringing amplitude
  //---------------------------------------------------------------------------------------------------------------------------------------------
  else if(counts == 2){
    // read the current position
    angleVal = (512.0 - analogRead(sensorInput))/ticksPerDeg;

    // determine the current time and the time that has passed since the last update, in milliseconds
    currentTime = millis()/timeAdjust;                             
    samplingTime = currentTime - prevTime;                      
  
    // compute raw angular velocity in deg/s if the sampling time is not zero. This solves a lot of problems. Thanks Andres!
    if (samplingTime != 0.0){                                   
      velocity = (angleVal - prevAngleVal)/samplingTime*1000.0; 
    }

    // filter velocity with an FIR filter
    velocity = fc*velocity+(1.0-fc)*prevVelocity;
    
    // determine how far we are from the wall
    posError = wallLoc - angleVal;                            
       
    // check to see if we are in the wall and if we are not already in an event 
    // If both of these are true, begin an "event" that will recoil and oscillate
    if (posError > 0.0) {
      if (event == 0) {
        // record the time that the event was triggered. This will be t = 0
        startTime = currentTime;
        
        // make note of the fact that an event has begun
        event = 1;

        // record the velocity that we entered the wall with so we can appropriately scale the response
        incv = velocity;
      } // if event == 0
      
      // we're still in the wall, but event may == 1, so calculate the response an ordinary virtual wall should produce
      wallResponse = posError*kWall;
      } // if posError > 0.0

      // if we aren't in the wall, set the wall response to zero
      else {                                        
      wallResponse = 0.0;                             
    }
    
    // If we are in an event, determine the recoil and oscillation forces to be displayed
    if(event == 1){
      // only display reaction for small enough initial velocities. This way we can still approach the wall quickly
      if(incv > -200.0){
        // record the time that has passed since the event began, with a new time variable that started at 0. units are seconds
        t = (currentTime - startTime)/1000.0;

        // calculate the force of the oscillation
        oscillation = 450*abs(1/(incv))*exp(-.5*t)*sin(omega*t);
        
        // calculate the force of the recoil
        recoil = 6.0;
      }
    }

    // combine the wall response with the oscillation and recoil
    totalTorque = wallResponse + oscillation + recoil;

    // calculate cutoff time
    //cutoff = t + 10000;
    //   || (currentTime > cutoff)

    // check to see if we are still within the region where events are allowed, [-15,0]
    if ((posError < erd)) {
      // if we have left the region, end the event
      event = 0; 

      // since the event has ended, oscillation and recoil are zero
      oscillation = 0;
      recoil = 0;
    }
    
    // Compute the duty cycle required to generate torque at the motor
    duty = abs(totalTorque);
  
    // Make sure the duty cycle is between 0 and 100%
    if (duty > 1) {
      duty = 1;
    } else if (duty < 0) {
      duty = 0;
    }
  
    // Determine correct direction for motor torque
    if (totalTorque > 0.0) {
      digitalWrite(motorDirPin, HIGH);
      motorCommand = (int)(duty * 255);         // convert duty cycle to output signal
    } else {
      digitalWrite(motorDirPin, LOW);
      motorCommand = (int)(duty * 255);         // convert duty cycle to output signal
    }

    // output the completed signal to the motor
    analogWrite(motorPWMPin, motorCommand);
  
    // update old values with the current state for the next loop
    prevAngleVal = angleVal;
    prevVelocity = velocity;
    prevTime = currentTime;
  } // if counts == 2
  
  //---------------------------------------------------------------------------------------------------------------------------------------------
  // Virtual Wall
  //---------------------------------------------------------------------------------------------------------------------------------------------
  else if(counts == 3){
    // read the sensor
    angleVal = (512.0 - analogRead(sensorInput))/ticksPerDeg;
    
    // determine the current time and the time that has passed since the last update, in milliseconds
    currentTime = millis()/timeAdjust;                             
    samplingTime = currentTime - prevTime;                      
  
    // compute raw angular velocity in deg/s if the sampling time is not zero. This solves a lot of problems. Thanks Andres!
    if (samplingTime != 0.0){                                   
      velocity = (angleVal - prevAngleVal)/samplingTime*1000.0; 
    }

    // filter velocity with an FIR filter
    velocity = fc*velocity+(1.0-fc)*prevVelocity;
    
    // determine how far we are from the wall
    posError = wallLoc - angleVal;                            

    // If we are in the wall, administer a response
    if (posError > 0.0){
      // determine the response
      wallResponse = posError*kWall;
    }
    // if we are not, write zero power to motor
    else{
      wallResponse = 0.0;
    }
    
    // Compute the duty cycle required to generate torque at the motor
    duty = abs(wallResponse);
  
    // Make sure the duty cycle is between 0 and 100%
    if (duty > 1) {
      duty = 1;
    } else if (duty < 0) {
      duty = 0;
    }
  
    // Determine correct direction for motor torque
    if (totalTorque > 0.0) {
      digitalWrite(motorDirPin, LOW);
      motorCommand = (int)(duty * 255);         // convert duty cycle to output signal
    } else {
      digitalWrite(motorDirPin, HIGH);
      motorCommand = (int)(duty * 255);         // convert duty cycle to output signal
    }

    // output the completed signal to the motor
    analogWrite(motorPWMPin, motorCommand);

    // update old values with the current state for the next loop
    prevAngleVal = angleVal;
    prevVelocity = velocity;
    prevTime = currentTime;

    
  } // if counts == 3
}

//-----------------------------------------------------------------------------------------------------------------------------------------------
//  Function to read onboard buttons
//-----------------------------------------------------------------------------------------------------------------------------------------------
int Read_Buttons()
{
  // read the value of the key resistor divider
  int adc_key_in = analogRead(A7);      
    if (adc_key_in >= 1000) return er0; 
  if (adc_key_in < 30)   return prop; 
  if (adc_key_in < 200)  return inv;
  if (adc_key_in < 500)  return vw;
  if (adc_key_in < 700)  return er1;
  if (adc_key_in < 990)  return er2;

  return er0;  
}

// ------------------------------------------------------------------------------------------------------------------------------
// Function to set PWM Freq -- DO NOT EDIT
// ------------------------------------------------------------------------------------------------------------------------------
void setPwmFrequency(int pin, int divisor) {
  byte mode;
  if(pin == 5 || pin == 6 || pin == 9 || pin == 10) {
    switch(divisor) {
      case 1: mode = 0x01; break;
      case 8: mode = 0x02; break;
      case 64: mode = 0x03; break;
      case 256: mode = 0x04; break;
      case 1024: mode = 0x05; break;
      default: return;
    }
    if(pin == 5 || pin == 6) {
      TCCR0B = TCCR0B & 0b11111000 | mode;
    } else {
      TCCR1B = TCCR1B & 0b11111000 | mode;
    }
  } else if(pin == 3 || pin == 11) {
    switch(divisor) {
      case 1: mode = 0x01; break;
      case 8: mode = 0x02; break;
      case 32: mode = 0x03; break;
      case 64: mode = 0x04; break;
      case 128: mode = 0x05; break;
      case 256: mode = 0x06; break;
      case 1024: mode = 0x7; break;
      default: return;
    }
    TCCR2B = TCCR2B & 0b11111000 | mode;
  }
}
